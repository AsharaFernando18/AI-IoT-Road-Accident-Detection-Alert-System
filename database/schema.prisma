generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  password_hash String
  full_name    String?
  role         String   @default("viewer")  // admin, operator, viewer
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  // Relations
  logs         SystemLog[]
}

model Accident {
  id              Int      @id @default(autoincrement())
  timestamp       DateTime @default(now())
  location_lat    Float
  location_lon    Float
  location_name   String?
  address         String?
  city            String?
  country         String?
  severity        String   @default("medium")  // low, medium, high, critical
  confidence      Float
  detected_objects String  // JSON string of detected objects
  image_path      String?
  video_frame     Int?
  status          String   @default("pending")  // pending, confirmed, false_alarm, resolved
  weather_info    String?  // Optional JSON string
  notes           String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  // Relations
  alerts          Alert[]
  
  @@index([timestamp])
  @@index([severity])
  @@index([status])
}

model Alert {
  id          Int      @id @default(autoincrement())
  accident_id Int
  language    String
  message     String
  translated_message String?
  sent_at     DateTime @default(now())
  status      String   @default("sent")  // sent, failed, pending
  recipient   String?  // Telegram chat ID or phone number
  
  // Relations
  accident    Accident @relation(fields: [accident_id], references: [id], onDelete: Cascade)
  
  @@index([accident_id])
  @@index([sent_at])
}

model AlertTemplate {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  language    String
  template    String   // Template with placeholders: {location}, {time}, {severity}
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@index([language])
}

model SystemLog {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  level      String   // INFO, WARNING, ERROR, CRITICAL
  source     String   // detection, translation, telegram, api, system
  message    String
  details    String?  // JSON string with additional details
  user_id    Int?
  
  // Relations
  user       User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  
  @@index([timestamp])
  @@index([level])
  @@index([source])
}

model SystemSetting {
  id         Int      @id @default(autoincrement())
  key        String   @unique
  value      String
  description String?
  updated_at DateTime @updatedAt
}

model EmergencyContact {
  id            Int      @id @default(autoincrement())
  name          String
  phone         String?
  telegram_id   String?
  email         String?
  role          String?  // police, ambulance, fire_department, admin
  languages     String   @default("en")  // Comma-separated language codes
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  
  @@index([is_active])
}

// New Enhanced Models for Emergency Response System

model Responder {
  id              Int      @id @default(autoincrement())
  name            String
  role            String   // hospital, police, ambulance
  telegram_bot_id String   @unique
  phone           String?
  email           String?
  address         String?
  city            String?
  state           String?
  latitude        Float?
  longitude       Float?
  coverage_radius Int?     // in kilometers
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  // Relations
  notifications   Notification[]
  
  @@index([role])
  @@index([city])
  @@index([is_active])
}

model Incident {
  id          Int       @id @default(autoincrement())
  accident_id Int?      // Link to old Accident model
  timestamp   DateTime  @default(now())
  location_lat Float
  location_lon Float
  address     String?
  city        String?
  state       String?
  country     String    @default("Malaysia")
  severity    String    // low, medium, high, critical
  status      String    @default("pending") // pending, dispatched, resolved
  type        String?   // collision, rollover, pedestrian, fire
  confidence  Float?
  description String?
  notes       String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  // Relations
  media         Media[]
  notifications Notification[]
  
  @@index([timestamp])
  @@index([severity])
  @@index([status])
  @@index([city])
}

model Media {
  id          Int      @id @default(autoincrement())
  incident_id Int
  media_type  String   // image, video, clip
  file_path   String
  file_size   Int?
  duration    Int?     // for videos, in seconds
  created_at  DateTime @default(now())
  
  // Relations
  incident Incident @relation(fields: [incident_id], references: [id], onDelete: Cascade)
  
  @@index([incident_id])
  @@index([media_type])
}

model Notification {
  id            Int      @id @default(autoincrement())
  incident_id   Int
  responder_id  Int
  language      String   @default("en")
  message       String
  sent_to       String   // hospital, police, ambulance
  sent_time     DateTime @default(now())
  delivered_time DateTime?
  status        String   @default("sent") // sent, delivered, failed
  error_message String?
  
  // Relations
  incident  Incident  @relation(fields: [incident_id], references: [id], onDelete: Cascade)
  responder Responder @relation(fields: [responder_id], references: [id], onDelete: Cascade)
  
  @@index([incident_id])
  @@index([responder_id])
  @@index([sent_time])
  @@index([status])
}
